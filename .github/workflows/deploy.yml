name: "Deploy"
on:
  push:
    branches: ["master"]

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Cache Nix store
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: /tmp/nixcache
          key: nix-${{ runner.os }}-${{ hashFiles('flake.lock', 'flake.nix') }}

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Import Nix store cache
        if: steps.nix-cache.outputs.cache-hit == 'true'
        run: nix copy --from /tmp/nixcache .#packages.x86_64-linux.default --no-check-sigs

      - name: Build application
        run: nix build --print-build-logs

      - name: Copy result
        run: cp --recursive --dereference --no-preserve=mode,ownership result public

      - name: Export Nix store cache
        if: steps.nix-cache.outputs.cache-hit != 'true'
        run: nix copy --to /tmp/nixcache .#packages.x86_64-linux.default --no-check-sigs

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "public"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
